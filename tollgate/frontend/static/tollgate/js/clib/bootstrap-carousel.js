// Generated by CoffeeScript 1.3.1

(function($) {
  var Carousel;
  Carousel = (function() {

    Carousel.name = 'Carousel';

    function Carousel(element, options) {
      this.$element = $(element);
      this.options = $.extend({}, $.fn.carousel.defaults, options);
      if (this.options.slide) {
        this.slide(this.options.slide);
      }
    }

    Carousel.prototype.to = function(pos) {
      var $active, activePos, children,
        _this = this;
      $active = this.$element.find(".active");
      children = $active.parent().children();
      activePos = children.index($active);
      if (pos > (children.length - 1) || pos < 0) {
        return;
      }
      if (this.sliding) {
        return this.$element.one("slid", function() {
          return _this.to(pos);
        });
      }
      if (pos === activePos) {
        return this.pause().cycle();
      }
      return this.slide((pos > activePos ? 'next' : 'prev'), $(children[pos]));
    };

    Carousel.prototype.pause = function() {
      clearInterval(this.interval);
      this.interval = null;
      return this;
    };

    Carousel.prototype.next = function() {
      if (this.sliding) {
        return;
      }
      return this.slide('next');
    };

    Carousel.prototype.prev = function() {
      if (this.sliding) {
        return;
      }
      return this.slide('prev');
    };

    Carousel.prototype.slide = function(type, next) {
      var $active, $next, direction, fallback, isCycling,
        _this = this;
      $active = this.$element.find('.active');
      $next = next || $active[type]();
      isCycling = this.interval;
      direction = type === 'next' ? 'left' : 'right';
      fallback = type === 'next' ? 'first' : 'last';
      this.sliding = true;
      if (isCycling) {
        this.pause;
      }
      $next = $next.length ? $next : this.$element.find('.item')[fallback]();
      if (!$.support.transition && this.$element.hasClass("slide")) {
        this.$element.trigger("slide");
        $active.removeClass("active");
        $next.addClass("active");
        this.sliding = false;
        this.$element.trigger("slid");
      } else {
        $next.addClass(type);
        $next[0].offsetWidth;
        $active.addClass(direction);
        $next.addClass(direction);
        this.$element.trigger("slide");
        this.$element.one($.support.transition.end, function() {
          $next.removeClass([type, direction].join(" ")).addClass("active");
          $active.removeClass(["active", direction].join(" "));
          _this.sliding = false;
          return setTimeout((function() {
            return _this.$element.trigger("slid");
          }), 0);
        });
      }
      if (isCycling) {
        this.cycle;
      }
      return this;
    };

    return Carousel;

  })();
  $.fn.carousel = function(option) {
    return this.each(function() {
      var $this, data, options;
      $this = $(this);
      data = $this.data("carousel");
      options = typeof option === "object" && option;
      if (!data) {
        $this.data("carousel", (data = new Carousel(this, options)));
      }
      if (typeof option === "number") {
        return data.to(option);
      } else if (typeof option === "string" || (option = options.slide)) {
        return data[option]();
      } else {
        return data.cycle();
      }
    });
  };
  $.fn.carousel.Class = Carousel;
  $.fn.carousel.defaults = {
    interval: 5000
  };
  return $(function() {
    return $("body").on("click.carousel.data-api", "[data-slide]", function(e) {
      var $target, $this, href, options;
      $this = $(this);
      href = void 0;
      $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""));
      options = !$target.data("modal") && $.extend({}, $target.data(), $this.data());
      $target.carousel(options);
      return e.preventDefault();
    });
  });
})(window.jQuery);
